control = list(fnscale=-1 ))
fr <- function(x) {   ## Rosenbrock Banana function
b=sin(x)
return(b)}
a=seq(-5*pi/8, 9*pi/8, length.out=1001)
#fr(a)
opt_sine_01 <- optim(par= 0,
fn=sin(a),
gr = NULL,
x=a,
method = "Brent",
lower = -5*pi/8, upper = 9*pi/8,
hessian = TRUE ,
control = list(fnscale=-1 ))
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
Q_25<- qnorm(p = 0.25, mean = 125, sd = 5)
Q_75<- qnorm(p = 0.75, mean = 125, sd = 5)
pnorm(q = 117, mean = 125, sd = 5)
N <- 21
v <- 4.2
### set input arguments !!!
log_post_sigma_unnorm <- function(sigma, N,v, lambda)
{result<- log(1/sqrt(2*pi*(sigma)^2))-v/(2*(sigma)^2)-lambda*sigma
return(result)
}
tibble::tibble(
sigma = seq(0.5,4.5,length.out=101)
) %>%
mutate(log_post=log_post_sigma_unnorm(sigma, N,v, 0.75)) %>% ggplot(aes(x=sigma, y=log_post))+geom_line()
### set the input arguments !!!
log_post_varphi_unnorm <- function(varphi,N,v,lambda)
{
# back-calculate sigma given varphi
sigma <- exp(varphi)
# calculate the unnormalized log-posterior on sigma
log_post <- log(1/sqrt(2*pi*(sigma)^2))-v/(2*(sigma)^2)-lambda*sigma
# account for the derivative adjustment
return(log_post * varphi)
}
tibble::tibble(
varphi = seq(0.5, 4.5, length.out=101)
) %>%
mutate(log_post=log_post_varphi_unnorm(varphi,N,v,0.75)) %>% ggplot(aes(x=varphi, y=log_post))+geom_line()
tibble::tibble(
x = seq(-5*pi/8, 9*pi/8, length.out=1001)
) %>%
ggplot(mapping = aes(x=x, y=sin(x)))+geom_line()
fr <- function(x) {   ## Rosenbrock Banana function
b=sin(x)
return(b)}
a=seq(-5*pi/8, 9*pi/8, length.out=1001)
#fr(a)
opt_sine_01 <- optim(par= 0,
fn=sin(a),
gr = NULL,
x=a,
method = "Brent",
lower = -5*pi/8, upper = 9*pi/8,
hessian = TRUE ,
control = list(fnscale=-1 ))
fr <- function(seq(-5*pi/8, 9*pi/8, length.out=1001)) {   ## Rosenbrock Banana function
a<-seq(-5*pi/8, 9*pi/8, length.out=1001)
fr <- function(a) {   ## Rosenbrock Banana function
b=sin(a)
return(b)}
seq(-5*pi/8, 9*pi/8, length.out=1001)
#fr(a)
opt_sine_01 <- optim(par= 0,
fn=fr,
gr = NULL,
x=a,
method = "Brent",
lower = -5*pi/8, upper = 9*pi/8,
hessian = TRUE ,
control = list(fnscale=-1 ))
a<-seq(-5*pi/8, 9*pi/8, length.out=1001)
fr <- function(a) {   ## Rosenbrock Banana function
b=sin(a)
return(b)}
#fr(a)
opt_sine_01 <- optim(par= 0,
fn=fr,
gr = NULL,
x=a,
method = "Brent",
lower = -5*pi/8, upper = 9*pi/8,
hessian = TRUE ,
control = list(fnscale=-1 ))
a<-seq(-5*pi/8, 9*pi/8, length.out=1001)
fr <- function(x) {   ## Rosenbrock Banana function
b=sin(x)}
#fr(a)
opt_sine_01 <- optim(par= 0,
fn=fr,
gr = NULL,
x=a,
method = "Brent",
lower = -5*pi/8, upper = 9*pi/8,
hessian = TRUE ,
control = list(fnscale=-1 ))
a<-seq(-5*pi/8, 9*pi/8, length.out=1001)
fr <- function(x) {   ## Rosenbrock Banana function
b=sin(x)}
#fr(a)
opt_sine_01 <- optim(par= 0,
fn=fr,
gr = NULL,
method = "Brent",
lower = -5*pi/8, upper = 9*pi/8,
hessian = TRUE ,
control = list(fnscale=-1 ))
opt_sine_01
opt_sine_02 <- optim(par= 3,
fn= fr,
gr = NULL,
method = "Brent",
lower = -5*pi/8, upper = 9*pi/8,
hessian = TRUE ,
control = list(fnscale=-1 ))
opt_sine_02
my_func <- function(x,constants)
{
result= -exp((x-constants[1])^constants[2])
}
my_constants <- c(0.7, 0.2)
opt_result <- optim( 1.75,
my_func,
gr = ,
,
method = "Brent",
lower = -0.5, upper = 2,
hessian = TRUE,
control = list(fnscale=-1  ))
opt_result <- optim( 1.75,
my_func,
gr = ,
constants=my_constants,
method = "Brent",
lower = -0.5, upper = 2,
hessian = TRUE,
control = list(fnscale=-1  ))
opt_result <- optim( 1.75,
my_func,
gr = ,
constants=my_constants,
method = "Brent",
lower = -0.5, upper = 2,
hessian = TRUE,
control = list())
opt_result
opt_result <- optim( 1.75,
my_func,
gr = ,
constants=my_constants,
method = "Brent",
lower = -0.5, upper = 2,
hessian = TRUE,
control = list(fnscale=-1))
opt_result <- optim( 1.75,
my_func,
gr = ,
constants=my_constants,
method = "Brent",
lower = -0.5, upper = 2,
hessian = TRUE,
control = list(fnscale=-5))
opt_result <- optim( 1.75,
my_func,
gr = ,
constants=my_constants,
method = "Brent",
lower = -0.5, upper = 2,
hessian = TRUE,
control = list(fnscale=-0.1))
opt_result <- optim( 1.75,
my_func,
gr = ,
constants=my_constants,
method = "Brent",
lower = -0.5, upper = 2,
hessian = TRUE,
control = list(fnscale=-5))
opt_result <- optim( 1.75,
my_func,
gr = ,
constants=my_constants,
method = "Brent",
lower = -0.5, upper = 2,
hessian = TRUE,
control = list())
opt_result
opt_result <- optim( 1.75,
my_func,
gr = NULL,
constants=my_constants,
method = "Brent",
lower = -0.5, upper = 2,
hessian = TRUE,
control = list())
opt_result
opt_result <- optim( 1.75,
my_func,
gr = NULL,
constants=my_constants,
method = "Brent",
lower = -0.5, upper = 2,
hessian = TRUE,
control = list(fnscale=-1))
opt_result <- optim( 1.75,
my_func,
gr = NULL,
,
method = "Brent",
lower = -0.5, upper = 2,
hessian = TRUE,
control = list(fnscale=-1))
opt_result <- optim( 1.75,
my_func,
gr = NULL,
constants=,
method = "Brent",
lower = -0.5, upper = 2,
hessian = TRUE,
control = list(fnscale=-1))
opt_result <- optim( 1.75,
my_func,
gr = NULL,
my_constants,
method = "Brent",
lower = -0.5, upper = 2,
hessian = TRUE,
control = list(fnscale=-1))
opt_result <- optim( 1.75,
my_func,
gr = NULL,
my_constants,
method = "Brent",
lower = -0.5, upper = 2,
hessian = TRUE,
control = list())
opt_result
my_func <- function(x,constants)
{
result= -exp((x-constants[1])^constants[2])
}
my_constants <- c(0.7, 2)
opt_result <- optim( 1.75,
my_func,
gr = NULL,
my_constants,
method = "Brent",
lower = -0.5, upper = 2,
hessian = TRUE,
control = list())
opt_result
opt_result <- optim( 1.75,
my_func,
gr = NULL,
my_constants,
method = "Brent",
lower = -0.5, upper = 2,
hessian = TRUE,
control = list(fnscale=-1))
opt_result
getwd()
tibble::tibble(
x = seq(-0.5,2, length.out=501)
) %>%
ggplot(mapping = aes(x = x,
y = my_func(x,my_constants)))+geom_line()
opt_result <- optim( 1.75,
my_func,
gr = NULL,
my_constants,
method = "Brent",
lower = -0.5, upper = 2,
hessian = TRUE,
control = list(fnscale=-1))
opt_result
tibble::tibble(
x = seq(-0.5,2, length.out=501)
) %>%
ggplot(mapping = aes(x = x,
y = my_func(x,my_constants)))+geom_line()+ geom_vline(xintercept=opt_result)
tibble::tibble(
x = seq(-0.5,2, length.out=501)
) %>%
ggplot(mapping = aes(x = x,
y = my_func(x,my_constants)))+geom_line()+ geom_vline(xintercept=opt_result)
tibble::tibble(
x = seq(-0.5,2, length.out=501)
) %>%
ggplot(mapping = aes(x = x,
y = my_func(x,my_constants)))+geom_line()
tibble::tibble(
x = seq(-0.5,2, length.out=501)
) %>%
ggplot(mapping = aes(x = x,
y = my_func(x,my_constants)))+geom_line() + geom_vline(xintercept=opt_result[2])
View(opt_result)
tibble::tibble(
x = seq(-0.5,2, length.out=501)
) %>%
ggplot(mapping = aes(x = x,
y = my_func(x,my_constants)))+geom_line() + geom_vline(xintercept=opt_result[1])
tibble::tibble(
x = seq(-0.5,2, length.out=501)
) %>%
ggplot(mapping = aes(x = x,
y = my_func(x,my_constants)))+geom_line() + geom_vline(xintercept=unlist(opt_result[1]))
tibble::tibble(
x = seq(-0.5,2, length.out=501)
) %>%
ggplot(mapping = aes(x = x,
y = my_func(x,my_constants)))+geom_line() + geom_vline(xintercept=unlist(opt_result[1]), color="red")
opt_result <- optim( -0.5,
log_post_varphi_unnorm (varphi,N,v,0.75),
gr = NULL,
my_constants,
method = "BFGS",
lower = , upper = ,
hessian = TRUE,
control = list(fnscale=-1))
opt_result <- optim( -0.5,
log_post_varphi_unnorm,
gr = NULL,
my_constants,
method = "BFGS",
lower = , upper = ,
hessian = TRUE,
control = list(fnscale=-1))
varphi = seq(0.5, 4.5, length.out=101)
opt_result <- optim( -0.5,
log_post_varphi_unnorm (varphi,N,v,0.75),
gr = NULL,
my_constants,
method = "BFGS",
lower = , upper = ,
hessian = TRUE,
control = list(fnscale=-1))
View(log_post_varphi_unnorm)
varphi = seq(0.5, 4.5, length.out=101)
opt_result <- optim( -0.5,
log_post_varphi_unnorm,
gr = NULL,
my_constants,
method = "BFGS",
lower = , upper = ,
hessian = TRUE,
control = list(fnscale=-1))
varphi = seq(0.5, 4.5, length.out=101)
opt_result <- optim( -0.5,
log_post_varphi_unnorm,
gr = NULL,
my_constants,
method = "BFGS",
lower = , upper = ,
hessian = ,
control = list(fnscale=-1))
varphi = seq(0.5, 4.5, length.out=101)
opt_result <- optim( -0.5,
log_post_varphi_unnorm,
gr = NULL,
method = "BFGS",
lower = , upper = ,
hessian = ,
control = list(fnscale=-1))
varphi = seq(0.5, 4.5, length.out=101)
opt_result <- optim( -0.5,
log_post_varphi_unnorm,
gr = NULL,
v,
method = "BFGS",
lower = , upper = ,
hessian = ,
control = list(fnscale=-1))
varphi = seq(0.5, 4.5, length.out=101)
opt_result <- optim( -0.5,
log_post_varphi_unnorm,
gr = NULL,
v=4.2,
method = "BFGS",
lower = , upper = ,
hessian = ,
control = list(fnscale=-1))
varphi = seq(0.5, 4.5, length.out=101)
opt_result <- optim( -0.5,
log_post_varphi_unnorm,
gr = NULL,
v=4.2, lambda=0.75,
method = "BFGS",
lower = , upper = ,
hessian = ,
control = list(fnscale=-1))
opt_result
varphi = seq(0.5, 4.5, length.out=101)
opt_result <- optim( -0.5,
log_post_varphi_unnorm,
gr = NULL,
v=4.2, lambda=0.75, N=21
method = "BFGS",
varphi = seq(0.5, 4.5, length.out=101)
opt_result <- optim( -0.5,
log_post_varphi_unnorm,
gr = NULL,
v=4.2, lambda=0.75, N=21,
method = "BFGS",
lower = , upper = ,
hessian = ,
control = list(fnscale=-1))
opt_result
varphi = seq(0.5, 4.5, length.out=101)
opt_result <- optim( -0.5,
log_post_varphi_unnorm,
gr = NULL,
v=4.2, lambda=0.75, N=21,varphi = seq(0.5, 4.5, length.out=101),
method = "BFGS",
lower = , upper = ,
hessian = ,
control = list(fnscale=-1))
varphi = seq(0.5, 4.5, length.out=101)
opt_result <- optim( -0.5,
log_post_varphi_unnorm,
gr = NULL,
v=4.2, lambda=0.75, N=21,
method = "BFGS",
lower = , upper = ,
hessian = ,
control = list(fnscale=-1))
opt_result
varphi = seq(0.5, 4.5, length.out=101)
opt_result <- optim( -0.5,
log_post_varphi_unnorm,
gr = NULL,
v=4.2, lambda=0.75,
method = "BFGS",
lower = , upper = ,
hessian = ,
control = list(fnscale=-1))
opt_result
varphi = seq(0.5, 4.5, length.out=101)
opt_result <- optim( -0.5,
log_post_varphi_unnorm,
gr = NULL,
v=4.2, lambda=0.75,
method = "BFGS",
lower = , upper = ,
hessian = TRUE,
control = list(fnscale=-1))
opt_result
varphi = seq(0.5, 4.5, length.out=101)
opt_result <- optim( -0.5,
log_post_varphi_unnorm,
gr = NULL,
v=4.2, lambda=0.75,
method = "BFGS",
lower = , upper = ,
hessian = ,
control = list(fnscale=-1))
opt_result
varphi = seq(0.5, 4.5, length.out=101)
varphi_opt_b <- optim( -0.5,
log_post_varphi_unnorm,
gr = NULL,
v=4.2, lambda=0.75,
method = "BFGS",
lower = , upper = ,
hessian = ,
control = list(fnscale=-1))
varphi_opt_b
varphi = seq(0.5, 4.5, length.out=101)
varphi_opt_a <- optim( -0.5,
log_post_varphi_unnorm,
gr = NULL,
v=4.2, lambda=0.75,
method = "BFGS",
lower = , upper = ,
hessian = ,
control = list(fnscale=-1))
varphi_opt_a
varphi = seq(0.5, 4.5, length.out=101)
varphi_opt_a <- optim( -0.5,
log_post_varphi_unnorm,
gr = NULL,
N=21,v=4.2, lambda=0.75,
method = "BFGS",
lower = , upper = ,
hessian = ,
control = list(fnscale=-1))
varphi_opt_a
varphi_opt_b <- optim( 1.35,
log_post_varphi_unnorm,
gr = NULL,
N=21, v=4.2, lambda=0.75,
method = "BFGS",
lower = , upper = ,
hessian = ,
control = list(fnscale=-1))
varphi_opt_b
tibble::tibble(
varphi = seq(0.5, 4.5, length.out=101)
) %>%
mutate(log_post=log_post_varphi_unnorm(varphi,N,v,0.75)) %>% ggplot(aes(x=varphi, y=log_post))+geom_line()
tibble::tibble(
varphi = seq(0.5, 4.5, length.out=101)
) %>%
mutate(log_post=log_post_varphi_unnorm(varphi,N,v,0.75)) %>% ggplot(aes(y=varphi, x=log_post))+geom_line()
tibble::tibble(
varphi = seq(0.5, 4.5, length.out=101)
) %>%
mutate(log_post=log_post_varphi_unnorm(varphi,N,v,0.75)) %>% ggplot(aes(x=varphi, y=log_post))+geom_line()
